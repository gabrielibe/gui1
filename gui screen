import tkinter as tk
from tkinter import filedialog
from tkinter import messagebox
from PIL import Image, ImageTk
import numpy as np

# Placeholder function for model processing
def process_image(image):
    
    return "Model processed result"

class ImageApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Mother-Chid Auth")
        self.root.geometry("900x600")
        self.root.configure(bg="#2c3e50")

        # Title label
        self.title_label = tk.Label(
            self.root, text="Mother-Child Auth", 
            font=("Helvetica", 20, "bold"), 
            fg="#ecf0f1", bg="#2c3e50"
        )
        self.title_label.pack(pady=20)

        # Image label (initially empty)
        self.image_label = tk.Label(self.root, bg="#2c3e50")
        self.image_label.pack(pady=10)

        # Buttons frame
        self.buttons_frame = tk.Frame(self.root, bg="#2c3e50")
        self.buttons_frame.pack(pady=10)

        # Upload button
        self.upload_button = tk.Button(
            self.buttons_frame, text="Upload child Image or Provide a file path", 
            command=self.upload_image, 
            font=("Helvetica", 12, "bold"),
            bg="#3498db", fg="#ecf0f1", activebackground="#2980b9"
        )
        self.upload_button.grid(row=0, column=0, padx=10)

      
        
        # Result label
        self.result_label = tk.Label(
            self.root, text="", 
            font=("Helvetica", 16), 
            fg="#ecf0f1", bg="#2c3e50"
        )
        self.result_label.pack(pady=20)
        
        # Placeholder for the image path
        self.image_path = None

    def upload_image(self):
        self.image_path = filedialog.askopenfilename(
            filetypes=[("Image Files", "*.jpg;*.jpeg;*.png;*.bmp;*.tiff")]
        )
        if not self.image_path:
            return

        # Open the image and display it
        image = Image.open(self.image_path)
        image.thumbnail((300, 300))
        self.photo = ImageTk.PhotoImage(image)
        self.image_label.configure(image=self.photo)
        self.result_label.configure(text="")

    def process_image(self):
        if not self.image_path:
            messagebox.showerror("Error", "Please upload an image first.")
            return
        
        # Load the image and process it
        image = Image.open(self.image_path)
        image = np.array(image)
        
        # Call the placeholder model function
        result = process_image(image)
        
        # Display the result
        self.result_label.configure(text=f"Result: {result}")

if __name__ == "__main__":
    root = tk.Tk()
    app = ImageApp(root)
    root.mainloop()
